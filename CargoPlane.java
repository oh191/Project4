import java.util.ArrayList;
import java.util.Arrays;


/**
 * <h1>CargoPlane</h1> Represents a Cargo Plane
 *
 * @author Junseok
 * @author JJaved
 * @version 12-03-18
 */
public class CargoPlane extends Vehicle implements Profitable {
    final double gasRate = 2.33;
    public int maxRange;


    /**
     * Default Constructor
     */
    //============================================================================
    public CargoPlane() {
        super();
    }


    public CargoPlane(String licensePlate, double maxWeight) {
        super(licensePlate, maxWeight);

    }

    //============================================================================

    /**
     * Overides its superclass method. Instead, after each iteration, the range will
     * increase by 10.
     *
     * @param warehousePackages List of packages to add from
     */
    public void fill(ArrayList<Package> warehousePackages) {

        int range = 0;
        int counter = 0;
        boolean isTrue = true;
        int size = warehousePackages.size();
        int[] change = new int[size];
        for (int i = 0; i < size; i++) {
            change[i] = Math.abs(warehousePackages.get(i).getDestination().getZipCode() - getZipDest());
        }
        Arrays.sort(change);
        while (isTrue) {
            for (int i = 0; i < warehousePackages.size(); i++) {
                if (range > 99999) {
                    isTrue = false;
                    break;
                } else if (isFull() || size == counter) {
                    isTrue = false;
                    break;
                } else {
                    int difference = Math.abs(warehousePackages.get(i).getDestination().getZipCode() - getZipDest());
                    if (Math.abs(difference) <= range) {
                        if (!getPackages().contains(warehousePackages.get(i))) {
                            counter++;
                            if (addPackage(warehousePackages.get(i))) {
                                System.out.println(warehousePackages.get(i).getID() + " has been added.");
                                maxRange = difference;
                            } else {
                                isTrue = false;
                                break;
                            }
                        }
                    }
                }

            }
            range += 10;

        }
        for (Package p : getPackages()) {
            Warehouse.pkgs.remove(p);
        }
    }
    /*
     * =============================================================================
     * | Methods from Profitable Interface
     * =============================================================================
     */

    /**
     * Returns the profits generated by the packages currently in the Cargo Plane.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 2.33)
     * </p>
     */

    public double getProfit() {


        double difference = maxRange * gasRate;
        double sum = super.getProfit();

        return sum - difference;

    }

    /**
     * Generates a String of the Cargo Plane report. Cargo plane report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in cargo plane</li>
     * </ul>
     *
     * @return Cargo Plane Report
     */
    public String report() {
        if (getCurrentWeight() != 0) {
            String output = "\n==========Cargo Plane Report==========\n";
            output += String.format("License Plate No.: %s\n" +
                            "Destination: %d\n" +
                            "Weight Load: %.2f/%.2f\n", getLicensePlate(), getZipDest(),
                    getCurrentWeight(), getMaxWeight());
            if (getProfit() < 0) {
                output += String.format("Net Profit: ($%.2f)\n", -1 * getProfit());
            } else {
                output += String.format("Net Profit: $%.2f\n", getProfit());
            }
            for (Package packa : getPackages()) {
                output += "=====Shipping Labels=====\n";
                output += packa.shippingLabel();
            }
            output += "\n==============================\n";
            return output;

        } else {
            return "";
        }
    }


}